// <auto-generated />
using System;
using Bookflix.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookflix.Migrations
{
    [DbContext(typeof(BookflixContext))]
    partial class BookflixContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bookflix.Models.Categoria", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxPerfiles")
                        .HasColumnType("int");

                    b.HasKey("Nombre");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Bookflix.Models.Contenido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Dato")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibroISBN")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibroISBN");

                    b.ToTable("Contenido");
                });

            modelBuilder.Entity("Bookflix.Models.Cuenta", b =>
                {
                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NombreUsuario");

                    b.ToTable("Cuentas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Cuenta");
                });

            modelBuilder.Entity("Bookflix.Models.Libro", b =>
                {
                    b.Property<int>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Editorial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISBN");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("Bookflix.Models.Perfil", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SubscriptorNombreUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Nombre");

                    b.HasIndex("SubscriptorNombreUsuario");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Bookflix.Models.Reclamo", b =>
                {
                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerfilNombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FechaCreacion");

                    b.HasIndex("PerfilNombre");

                    b.ToTable("Reclamos");
                });

            modelBuilder.Entity("Bookflix.Models.Reseña", b =>
                {
                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LibroISBN")
                        .HasColumnType("int");

                    b.Property<string>("PerfilNombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Puntaje")
                        .HasColumnType("tinyint");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FechaCreacion");

                    b.HasIndex("LibroISBN");

                    b.HasIndex("PerfilNombre");

                    b.ToTable("Reseña");
                });

            modelBuilder.Entity("Bookflix.Models.Tarjeta", b =>
                {
                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("CodigoSeguridad")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptorNombreUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Numero");

                    b.HasIndex("SubscriptorNombreUsuario")
                        .IsUnique()
                        .HasFilter("[SubscriptorNombreUsuario] IS NOT NULL");

                    b.ToTable("Tarjeta");
                });

            modelBuilder.Entity("Bookflix.Models.Subscriptor", b =>
                {
                    b.HasBaseType("Bookflix.Models.Cuenta");

                    b.Property<string>("CategoriaNombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoriaNombre");

                    b.HasDiscriminator().HasValue("Subscriptor");
                });

            modelBuilder.Entity("Bookflix.Models.Contenido", b =>
                {
                    b.HasOne("Bookflix.Models.Libro", "Libro")
                        .WithMany("Contenidos")
                        .HasForeignKey("LibroISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bookflix.Models.Perfil", b =>
                {
                    b.HasOne("Bookflix.Models.Subscriptor", "Subscriptor")
                        .WithMany("Perfiles")
                        .HasForeignKey("SubscriptorNombreUsuario");
                });

            modelBuilder.Entity("Bookflix.Models.Reclamo", b =>
                {
                    b.HasOne("Bookflix.Models.Perfil", "Creador")
                        .WithMany()
                        .HasForeignKey("PerfilNombre");
                });

            modelBuilder.Entity("Bookflix.Models.Reseña", b =>
                {
                    b.HasOne("Bookflix.Models.Libro", null)
                        .WithMany("Reseñas")
                        .HasForeignKey("LibroISBN");

                    b.HasOne("Bookflix.Models.Perfil", "Creador")
                        .WithMany()
                        .HasForeignKey("PerfilNombre");
                });

            modelBuilder.Entity("Bookflix.Models.Tarjeta", b =>
                {
                    b.HasOne("Bookflix.Models.Subscriptor", "Subscriptor")
                        .WithOne("Tarjeta")
                        .HasForeignKey("Bookflix.Models.Tarjeta", "SubscriptorNombreUsuario");
                });

            modelBuilder.Entity("Bookflix.Models.Subscriptor", b =>
                {
                    b.HasOne("Bookflix.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaNombre");
                });
#pragma warning restore 612, 618
        }
    }
}
